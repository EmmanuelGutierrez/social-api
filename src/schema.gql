# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthReturnDto {
  tokenWs: String!
}

input CreatePostInput {
  body: String!
  replyTo: String
  tags: [String!]
  title: String
}

input CreateUserInput {
  birth_date: Int!
  email: String!
  lastname: String!
  name: String!
  password: String!
  username: String!
}

type FeedPost {
  createdAt: Float!
  postId: Post!
  updatedAt: Float!
  userId: User!
}

type FeedPostDataReturnDto {
  data: [FeedPost!]!
  inThisPage: Float!
  page: Float!
  total: Float!
}

type File {
  _id: ID!
  asset_id: String
  bytes: Float!
  createdAt: Float!
  folder: String
  format: String!
  original_filename: String!
  public_id: String!
  resource_type: String!
  secure_url: String!
  updatedAt: Float!
  url: String!
}

input FilterFeedPostInput {
  cursorDate: Int
  limit: Float
  tags: [String!]
}

input FilterInput {
  limit: Float
  page: Float
  tags: [String!]
}

type FollowUserDto {
  _id: ID!
  followDate: Float!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(data: CreatePostInput!, files: [Upload!]): Post!
  followUser(userToFollowId: String!): Boolean!
  login(loginInput: LoginInput!): AuthReturnDto!
  register(register: CreateUserInput!): String!
  updatePost(data: UpdatePostInput!): Post!
  updateReaction(id: String!): Post!
}

type Post {
  _id: ID!
  authorId: User!
  body: String!
  createdAt: Float!
  reactions: [User!]!
  replyTo: Post
  tags: [String!]!
  title: String
  updatedAt: Float!
}

type PostDataReturnDto {
  data: [Post!]!
  inThisPage: Float!
  page: Float!
  total: Float!
}

type Query {
  allFiles: [File!]!
  allPosts(params: FilterInput!): PostDataReturnDto!
  getComments(id: String!): Post!
  getOne(id: String!): Post!
  mePosts(params: FilterInput!): PostDataReturnDto!
  meQuery: User!
  myFeed(params: FilterFeedPostInput!): FeedPostDataReturnDto!
  rotateAccessToken: AuthReturnDto!
  test: String!
}

type SubDataReturnDto {
  authorId: String!
  authorUsername: String!
  postId: String!
}

type Subscription {
  subNewPosts: SubDataReturnDto!
}

input UpdatePostInput {
  id: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ID!
  createdAt: Float!
  email: String!
  followers: [FollowUserDto!]!
  following: [FollowUserDto!]!
  lastname: String!
  name: String!
  profileImg: File
  refreshTokenExpiresAt: Float!
  refreshTokenHash: String!
  role: roles!
  updatedAt: Float!
  username: String!
}

"""Indicates the user role"""
enum roles {
  ADMIN
  USER
}